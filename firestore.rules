rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User profile documents. Signed-in users can read any profile,
    // but may only write their own record.
    match /users/{uid} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == uid;

      // Invitations are stored as a subcollection below each user.
      match /gameNightInvites/{inviteId} {
        allow read: if request.auth != null && request.auth.uid == uid;

        // Owners create invites for other players.
        allow create: if request.auth != null
          && request.resource.data.inviterId == request.auth.uid;

        // Invitees can update or delete their own invite (accept / decline).
        allow update, delete: if request.auth != null && request.auth.uid == uid;
      }
    }

    // Public game catalogue imported from BGG.
    match /games/{gameId} {
      allow read: if true;
      allow write: if false;
    }

    // Friendships link exactly two players.
    match /friendships/{friendshipId} {
      allow get: if request.auth != null
        && (
          resource == null
            || (
              resource.data.userIds is list
              && request.auth.uid in resource.data.userIds
            )
        );

      allow list: if request.auth != null;

      allow create: if request.auth != null
        && request.resource.data.userIds is list
        && request.resource.data.userIds.size() == 2
        && request.resource.data.userIds[0] != request.resource.data.userIds[1]
        && request.auth.uid in request.resource.data.userIds;

      allow update, delete: if request.auth != null
        && resource != null
        && request.auth.uid in resource.data.userIds;
    }

    // Friend requests require approval before becoming friendships.
    match /friendRequests/{requestId} {
      function pairKey(uidA, uidB) {
        return uidA < uidB ? uidA + "_" + uidB : uidB + "_" + uidA;
      }

      allow get: if request.auth != null
        && (
          resource == null
            || (
              request.auth.uid == resource.data.senderId
              || request.auth.uid == resource.data.receiverId
            )
        );

      allow list: if request.auth != null;

      allow create: if request.auth != null
        && request.resource.data.senderId == request.auth.uid
        && request.resource.data.receiverId is string
        && request.resource.data.senderId != request.resource.data.receiverId
        && request.resource.data.status == "pending"
        && request.resource.data.pairKey == pairKey(
          request.resource.data.senderId,
          request.resource.data.receiverId
        )
        && request.resource.id == pairKey(
          request.resource.data.senderId,
          request.resource.data.receiverId
        );

      allow update: if request.auth != null
        && resource != null
        && resource.data.status == "pending"
        && request.resource.data.pairKey == resource.data.pairKey
        && request.resource.data.senderId == resource.data.senderId
        && request.resource.data.receiverId == resource.data.receiverId
        && request.auth.uid == resource.data.receiverId
        && (
          request.resource.data.status == "accepted"
          || request.resource.data.status == "declined"
        );

      allow delete: if request.auth != null
        && resource != null
        && (
          request.auth.uid == resource.data.senderId
          || request.auth.uid == resource.data.receiverId
        );
    }

    // Two-player conversations between friends.
    match /conversations/{conversationId} {
      allow get: if request.auth != null
        && (
          resource == null
            || (
              resource.data.userIds is list
              && request.auth.uid in resource.data.userIds
            )
        );

      allow update: if request.auth != null
        && resource != null
        && resource.data.userIds is list
        && request.auth.uid in resource.data.userIds;

      allow list: if request.auth != null;

      allow create: if request.auth != null
        && request.resource.data.userIds is list
        && request.auth.uid in request.resource.data.userIds;

      match /messages/{messageId} {
        function participants() {
          return get(/databases/$(database)/documents/conversations/$(conversationId)).data.userIds;
        }

        allow get, list: if request.auth != null && request.auth.uid in participants();

        allow create: if request.auth != null
          && request.auth.uid in participants()
          && request.resource.data.senderId == request.auth.uid;

        allow update, delete: if false;
      }
    }

    // Game night documents are stored centrally. Owners manage them,
    // invited players can read once invited, and accepted players are
    // included in game night content.
    match /gameNights/{nightId} {
      function ownerId() {
        return resource.data.ownerId;
      }

      function invitedIds() {
        return resource.data.invitedFriendIds != null
          ? resource.data.invitedFriendIds
          : [];
      }

      function acceptedIds() {
        return resource.data.acceptedFriendIds != null
          ? resource.data.acceptedFriendIds
          : [];
      }

      allow read: if request.auth != null
        && (
          request.auth.uid == ownerId()
          || request.auth.uid in invitedIds()
          || request.auth.uid in acceptedIds()
        );

      allow create: if request.auth != null
        && request.resource.data.ownerId == request.auth.uid;

      allow update, delete: if request.auth != null
        && request.auth.uid == ownerId();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
